# Sepulki GraphQL Schema
# Metallurgy-themed robotics-as-a-service platform

scalar JSON
scalar DateTime
scalar Upload

# Core Types
type Sepulka {
  id: ID!
  name: String!
  version: String!
  description: String
  pattern: Pattern
  alloys: [Alloy!]!
  ingots: [Ingot!]!
  status: SepulkaStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: Smith!
}

type Alloy {
  id: ID!
  name: String!
  description: String
  type: AlloyType!
  specifications: JSON
  meshAssets: [String!]
  urdfTemplate: String
  compatibility: [AlloyCompatibility!]
  tags: [String!]
  version: String!
  createdAt: DateTime!
}

type Pattern {
  id: ID!
  name: String!
  description: String
  parameters: JSON
  defaults: JSON
  template: String
  category: PatternCategory!
  tags: [String!]
  createdAt: DateTime!
}

type Ingot {
  id: ID!
  sepulkaId: ID!
  version: String!
  buildHash: String!
  artifacts: [BuildArtifact!]!
  status: IngotStatus!
  buildLogs: [String!]
  createdAt: DateTime!
  tempered: Boolean!
  temperResults: TemperResults
}

type Fleet {
  id: ID!
  name: String!
  description: String
  locus: Locus!
  robots: [Robot!]!
  activeTask: Task
  status: FleetStatus!
  constraints: [Edict!]
  telemetry: BellowsStream
  createdAt: DateTime!
}

type Robot {
  id: ID!
  name: String!
  sepulkaId: ID!
  fleetId: ID!
  currentIngot: Ingot!
  status: RobotStatus!
  lastSeen: DateTime
  pose: RobotPose
  batteryLevel: Float
  healthScore: Float
}

type Task {
  id: ID!
  name: String!
  description: String
  type: TaskType!
  parameters: JSON
  assignedRobots: [Robot!]
  runs: [Run!]!
  status: TaskStatus!
  priority: TaskPriority!
  scheduledAt: DateTime
  createdAt: DateTime!
  createdBy: Smith!
}

type Run {
  id: ID!
  taskId: ID!
  robotId: ID!
  status: RunStatus!
  startedAt: DateTime
  completedAt: DateTime
  metrics: RunMetrics
  logs: [String!]
}

type Locus {
  id: ID!
  name: String!
  description: String
  coordinates: Coordinates
  constraints: [Edict!]
  safetyZones: [SafetyZone!]
}

type Smith {
  id: ID!
  email: String!
  name: String!
  role: SmithRole!
  permissions: [Permission!]!
  preferences: JSON
  createdAt: DateTime!
}

type Session {
  smithId: ID!
  token: String!
  refreshToken: String!
  expiresAt: DateTime!
}

type AuthPayload {
  session: Session
  smith: Smith
  errors: [Error!]
}

type BellowsStream {
  fleetId: ID!
  metrics: [TelemetryMetric!]!
  events: [TelemetryEvent!]!
  realTime: Boolean!
}

type Edict {
  id: ID!
  name: String!
  description: String
  type: EdictType!
  rules: JSON
  severity: EdictSeverity!
  active: Boolean!
}

# Missing Core Types
type AlloyCompatibility {
  alloyId: ID!
  compatibleWith: [ID!]!
  constraints: JSON
}

type BuildArtifact {
  type: String!
  path: String!
  size: Int!
  checksum: String!
}

type TemperResults {
  metrics: JSON!
  improvements: JSON
  recommendations: [String!]
  optimizedParameters: JSON
}

type RobotPose {
  position: Coordinates!
  orientation: JSON!
  jointPositions: JSON
  timestamp: DateTime!
}

type RunMetrics {
  duration: Int!
  energyConsumed: Float
  accuracy: Float
  errors: Int!
  warnings: Int!
  performance: JSON
}

type Coordinates {
  latitude: Float!
  longitude: Float!
  altitude: Float
}

type SafetyZone {
  id: ID!
  name: String!
  type: String!
  boundaries: JSON!
  restrictions: [String!]!
}

type TelemetryMetric {
  name: String!
  value: Float!
  unit: String
  timestamp: DateTime!
}

type TelemetryEvent {
  id: ID!
  robotId: ID!
  type: String!
  data: JSON!
  timestamp: DateTime!
}

type Error {
  code: String!
  message: String!
  field: String
}

type Deployment {
  id: ID!
  ingotId: ID!
  fleetId: ID!
  status: String!
  rolloutPercent: Int!
  createdAt: DateTime!
}

type TaskAssignment {
  taskId: ID!
  robotId: ID!
  confidence: Float!
  estimatedDuration: Int
  assignedAt: DateTime!
}

type PolicyBreach {
  id: ID!
  edictId: ID!
  robotId: ID
  fleetId: ID
  severity: EdictSeverity!
  message: String!
  data: JSON
  timestamp: DateTime!
}

# Enums
enum PatternCategory {
  INDUSTRIAL_ARM
  MOBILE_ROBOT
  HUMANOID
  QUADRUPED
  DRONE
  CUSTOM
}

enum TaskType {
  PICK_AND_PLACE
  ASSEMBLY
  INSPECTION
  TRANSPORT
  MAINTENANCE
  PATROL
  CUSTOM
}

enum Permission {
  FORGE_SEPULKA
  EDIT_SEPULKA
  DELETE_SEPULKA
  CAST_INGOT
  TEMPER_INGOT
  QUENCH_TO_FLEET
  RECALL_FLEET
  EMERGENCY_STOP
  VIEW_FLEET
  MANAGE_FLEET
  VIEW_ROBOTS
  MANAGE_ROBOTS
  CREATE_TASK
  ASSIGN_TASK
  CANCEL_TASK
  VIEW_TASKS
  VIEW_CATALOG
  MANAGE_ALLOYS
  MANAGE_PATTERNS
  VIEW_EDICTS
  MANAGE_EDICTS
  VIEW_BELLOWS
  EXPORT_TELEMETRY
  MANAGE_SMITHS
  SYSTEM_CONFIG
  AUDIT_LOGS
}

enum SepulkaStatus {
  FORGING
  CAST_READY
  CASTING
  CAST_FAILED
  READY
}

enum AlloyType {
  ACTUATOR
  SENSOR
  CONTROLLER
  END_EFFECTOR
  CHASSIS
  POWER
  COMMUNICATION
}

enum IngotStatus {
  BUILDING
  BUILD_FAILED
  READY
  TEMPERING
  TEMPER_FAILED
  TEMPERED
  DEPLOYED
}

enum FleetStatus {
  IDLE
  ACTIVE
  MAINTENANCE
  ERROR
  OFFLINE
}

enum RobotStatus {
  IDLE
  WORKING
  CHARGING
  MAINTENANCE
  ERROR
  OFFLINE
}

enum TaskStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum TaskPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum RunStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum SmithRole {
  SMITH
  OVER_SMITH
  ADMIN
}

enum EdictType {
  SAFETY
  PERFORMANCE
  COMPLIANCE
  OPERATIONAL
}

enum EdictSeverity {
  INFO
  WARNING
  CRITICAL
}

# Input Types
input ForgeInput {
  name: String!
  description: String
  patternId: ID
  alloyIds: [ID!]!
  parameters: JSON
}

input TaskInput {
  name: String!
  description: String
  type: TaskType!
  parameters: JSON
  priority: TaskPriority = NORMAL
  scheduledAt: DateTime
}

input TemperInput {
  goals: [TemperGoal!]!
  constraints: JSON
}

input TemperGoal {
  metric: String!
  target: String!
  weight: Float = 1.0
}

# Filter Input Types
input SepulkaFilter {
  status: SepulkaStatus
  createdBy: ID
  patternId: ID
  tags: [String!]
}

input AlloyFilter {
  type: AlloyType
  tags: [String!]
  compatibility: ID
}

input FleetFilter {
  status: FleetStatus
  locusId: ID
}

input TaskFilter {
  status: TaskStatus
  type: TaskType
  priority: TaskPriority
  assignedRobotId: ID
}

input TimeRange {
  start: DateTime!
  end: DateTime!
}

input EdictInput {
  name: String!
  description: String
  type: EdictType!
  rules: JSON!
  severity: EdictSeverity!
  active: Boolean = true
  appliesTo: JSON
}

input LoginCredentials {
  email: String!
  password: String!
}

# Mutation Payloads
type ForgeSepulkaPayload {
  sepulka: Sepulka
  errors: [Error!]
}

type CastIngotPayload {
  ingot: Ingot
  errors: [Error!]
}

type TemperIngotPayload {
  ingot: Ingot
  results: TemperResults
  errors: [Error!]
}

type QuenchPayload {
  deployment: Deployment
  errors: [Error!]
}

type DispatchPayload {
  task: Task
  assignments: [TaskAssignment!]
  errors: [Error!]
}

# Queries
type Query {
  # Sepulkas
  sepulkas(filter: SepulkaFilter, limit: Int, offset: Int): [Sepulka!]!
  sepulka(id: ID!): Sepulka
  
  # Catalog
  alloys(filter: AlloyFilter, limit: Int, offset: Int): [Alloy!]!
  alloy(id: ID!): Alloy
  patterns(category: PatternCategory, limit: Int, offset: Int): [Pattern!]!
  pattern(id: ID!): Pattern
  
  # Fleet Management
  fleets(filter: FleetFilter, limit: Int, offset: Int): [Fleet!]!
  fleet(id: ID!): Fleet
  robots(fleetId: ID, status: RobotStatus, limit: Int, offset: Int): [Robot!]!
  robot(id: ID!): Robot
  
  # Task Management
  tasks(filter: TaskFilter, limit: Int, offset: Int): [Task!]!
  task(id: ID!): Task
  runs(taskId: ID, robotId: ID, limit: Int, offset: Int): [Run!]!
  
  # Telemetry
  bellows(fleetId: ID!, timeRange: TimeRange!): BellowsStream!
  
  # Policy
  edicts(type: EdictType, active: Boolean, limit: Int, offset: Int): [Edict!]!
}

# Mutations
type Mutation {
  # Authentication
  login(credentials: LoginCredentials!): AuthPayload!
  refreshToken(refreshToken: String!): AuthPayload!
  logout: Boolean!
  
  # Design & Build
  forgeSepulka(input: ForgeInput!): ForgeSepulkaPayload!
  castIngot(sepulkaId: ID!): CastIngotPayload!
  temperIngot(ingotId: ID!, input: TemperInput!): TemperIngotPayload!
  
  # Deployment
  quenchToFleet(ingotId: ID!, fleetId: ID!, rolloutPercent: Int = 100): QuenchPayload!
  recallFleet(fleetId: ID!, toVersion: String!): QuenchPayload!
  
  # Task Management
  dispatchTask(fleetId: ID!, input: TaskInput!): DispatchPayload!
  cancelTask(taskId: ID!): Task
  
  # Fleet Management
  updateRobotStatus(robotId: ID!, status: RobotStatus!): Robot
  emergencyStop(fleetId: ID!): Fleet
  
  # Policy
  addEdict(input: EdictInput!): Edict
  updateEdict(id: ID!, input: EdictInput!): Edict
  deactivateEdict(id: ID!): Edict
}

# Subscriptions
type Subscription {
  bellowsStream(fleetId: ID!): BellowsStream!
  taskUpdates(fleetId: ID): Task!
  robotStatus(robotId: ID): Robot!
  policyBreaches(severity: EdictSeverity): PolicyBreach!
}
